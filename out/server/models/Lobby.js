"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GameEngine_1 = __importDefault(require("./GameEngine"));
const Events_1 = __importDefault(require("../enums/Events"));
const StandardRules_1 = __importDefault(require("./StandardRules"));
/**
 * A representation of a Lobby, which is responsible for handling messages to and from this Lobby instance.
 * The event loop consists of:
 * [[connectPlayer]] (wait for two players) -> [[beginGame]] (wait for messages)
 * -> [[choiceHandler]] (wait for both players to make a choice)
 * -> [[checkForAllChoicesMade]] -> [[beginRound]] -> [[choiceHandler]]
 */
class Lobby {
    constructor(id, server, gameRules = new StandardRules_1.default(), firstTo = 5, roundDelay = 5000) {
        this._id = id;
        this._players = [];
        this._game = new GameEngine_1.default(gameRules);
        this._server = server;
        this._ROUND_DELAY = roundDelay;
        this._FIRST_TO = firstTo;
    }
    /**
     * Store the connection of a player into this Lobby as either player 1 or player 2.
     * This is determined from the size of [[_players]], as each connection is automatically
     * pushed into [[_players]]. If this is player 1, a [[NewLobbyEvent]] is sent to the
     * player.
     *
     * Once [[_players]].length reaches 2, [[beginGame]] is called
     * @param connection The player to be added into this lobby
     */
    connectPlayer(connection) {
        this._players.push(connection);
        if (this._players.length === 1) {
            let event = {
                event: 'new lobby',
                lobbyID: this._id
            };
            connection.send(JSON.stringify(event));
        }
        else {
            console.log(`Beginning lobby ${this._id}`);
            this.beginGame();
        }
    }
    /**
     * Sends a [[BeginGameEvent]] to both players and sets the `.on('message', ...)` handlers
     * to call [[choiceHandler]]
     */
    beginGame() {
        // Both players have connected to the lobby
        let event = {
            event: 'begin game',
            player1: this._game.getPlayer1().toJSON(),
            player2: this._game.getPlayer2().toJSON()
        };
        this.sendToPlayers(JSON.stringify(event));
        this._players[0].on('message', (message) => {
            this.choiceHandler(message, this._players[0]);
        });
        this._players[1].on('message', (message) => {
            this.choiceHandler(message, this._players[1]);
        });
    }
    /**
     * Sets the choice of `player` to the corresponding `message` based on [[Events]]. Afterwards, this
     * will call [[checkForAllChoicesMade]]
     * @param message Message received from `player`
     * @param player The player the message was sent from
     */
    choiceHandler(message, player) {
        let choice = null;
        switch (message) {
            case "shoot":
                choice = Events_1.default.SHOOT;
                break;
            case "reload":
                choice = Events_1.default.RELOAD;
                break;
            case "block":
                choice = Events_1.default.BLOCK;
                break;
        }
        if (choice !== null) {
            if (player === this._players[0]) {
                this._game.getPlayer1().setChoice(choice);
            }
            else {
                this._game.getPlayer2().setChoice(choice);
            }
            this.checkForAllChoicesMade();
        }
    }
    /**
     * Checks to see if both players have made a choice. If so, a [[RoundOverEvent]] is generated by calling [[GameEngineImpl.processRound]]
     * and is sent to both players. This method waits [[_ROUND_DELAY]] milliseconds until it then either calls
     * [[endGame]] if either player has reached [[_FIRST_TO]] points, otherwise it will begin a new round
     * by calling [[beginRound]].
     */
    checkForAllChoicesMade() {
        // If both players have made their choice, process the results
        if (this._game.getPlayer1().getChoice() && this._game.getPlayer2().getChoice()) {
            // Informs players of the result of the round in the format
            // <RoundState> <Player 1 Event> <Player 2 Event>
            // i.e. draw shoot block
            let event = {
                event: 'round over',
                results: this._game.processRound(),
                player1: this._game.getPlayer1().toJSON(),
                player2: this._game.getPlayer2().toJSON()
            };
            this.sendToPlayers(JSON.stringify(event));
            // Wait five seconds until the next round starts
            // (allows players time to read what happened in the round)
            setTimeout(() => {
                // If a player has reached the point limit, the game is over and thus the lobby
                // should be destroyed
                if (this._game.getPlayer1().getPoints() === this._FIRST_TO) {
                    this.endGame('player 1');
                }
                else if (this._game.getPlayer2().getPoints() === this._FIRST_TO) {
                    this.endGame('player 2');
                }
                else {
                    this.beginRound();
                }
            }, this._ROUND_DELAY);
        }
    }
    /**
     * Sends details of the game's state (i.e. player details such as number of bullets,
     * points, etc.) to each player connected to the lobby
     */
    beginRound() {
        let event = {
            event: 'new round',
        };
        this.sendToPlayers(JSON.stringify(event));
    }
    /**
     * Sends each player a message declaring who won, before calling [[Server.destroyLobby]] to remove the lobby
     * @param victor The winner of this lobby (either player 1 or player 2)
     */
    endGame(victor) {
        let event = {
            event: 'game ended',
            winner: victor
        };
        this.sendToPlayers(JSON.stringify(event));
        this._server.destroyLobby(this._id);
    }
    /**
     * A utility method to send a message to both players connected to the lobby
     * @param message The message to be sent
     */
    sendToPlayers(message) {
        this._players[0].send(message);
        this._players[1].send(message);
    }
    getID() {
        return this._id;
    }
    getPlayers() {
        return this._players.slice();
    }
    getGameEngine() {
        return this._game;
    }
}
exports.default = Lobby;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9iYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmVyL21vZGVscy9Mb2JieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDhEQUFzQztBQUN0Qyw2REFBcUM7QUFTckMsb0VBQTRDO0FBRTVDOzs7Ozs7R0FNRztBQUNIO0lBc0JJLFlBQVksRUFBVSxFQUFFLE1BQWMsRUFBRSxZQUF3QixJQUFJLHVCQUFhLEVBQUUsRUFBRSxVQUFrQixDQUFDLEVBQUUsYUFBcUIsSUFBSTtRQUMvSCxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxvQkFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILGFBQWEsQ0FBQyxVQUFxQjtRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixJQUFJLEtBQUssR0FBa0I7Z0JBQ3ZCLEtBQUssRUFBRSxXQUFXO2dCQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUc7YUFDcEIsQ0FBQztZQUVGLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzFDO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUUzQyxJQUFJLENBQUMsU0FB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