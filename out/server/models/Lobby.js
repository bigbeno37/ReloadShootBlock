"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Events_1 = __importDefault(require("../enums/Events"));
const GameEngineImpl_1 = __importDefault(require("../GameEngineImpl"));
/**
 * A representation of a Lobby, which is responsible for handling messages to and from this Lobby instance.
 * The event loop consists of:
 * [[connectPlayer]] (wait for two players) -> [[beginGame]] (wait for messages)
 * -> [[choiceHandler]] (wait for both players to make a choice)
 * -> [[checkForAllChoicesMade]] -> [[beginRound]] -> [[choiceHandler]]
 */
class Lobby {
    constructor(id, server, firstTo = 5, roundDelay = 5000) {
        this._id = id;
        this._players = [];
        this._game = new GameEngineImpl_1.default();
        this._server = server;
        this._ROUND_DELAY = roundDelay;
        this._FIRST_TO = firstTo;
    }
    /**
     * Store the connection of a player into this Lobby as either player 1 or player 2.
     * This is determined from the size of [[_players]], as each connection is automatically
     * pushed into [[_players]]. If this is player 1, a [[NewLobbyEvent]] is sent to the
     * player.
     *
     * Once [[_players]].length reaches 2, [[beginGame]] is called
     * @param connection The player to be added into this lobby
     */
    connectPlayer(connection) {
        this._players.push(connection);
        if (this._players.length === 1) {
            let event = {
                event: 'new lobby',
                lobbyID: this._id
            };
            connection.send(JSON.stringify(event));
        }
        else {
            console.log(`Beginning lobby ${this._id}`);
            this.beginGame();
        }
    }
    /**
     * Sends a [[BeginGameEvent]] to both players and sets the `.on('message', ...)` handlers
     * to call [[choiceHandler]]
     */
    beginGame() {
        // Both players have connected to the lobby
        let event = {
            event: 'begin game',
            player1: this._game.getPlayer1().toJSON(),
            player2: this._game.getPlayer2().toJSON()
        };
        this.sendToPlayers(JSON.stringify(event));
        this._players[0].on('message', (message) => {
            this.choiceHandler(message, this._players[0]);
        });
        this._players[1].on('message', (message) => {
            this.choiceHandler(message, this._players[1]);
        });
    }
    /**
     * Sets the choice of `player` to the corresponding `message` based on [[Events]]. Afterwards, this
     * will call [[checkForAllChoicesMade]]
     * @param message Message received from `player`
     * @param player The player the message was sent from
     */
    choiceHandler(message, player) {
        let choice = null;
        switch (message) {
            case "shoot":
                choice = Events_1.default.SHOOT;
                break;
            case "reload":
                choice = Events_1.default.RELOAD;
                break;
            case "block":
                choice = Events_1.default.BLOCK;
                break;
        }
        if (choice !== null) {
            if (player === this._players[0]) {
                this._game.getPlayer1().setChoice(choice);
            }
            else {
                this._game.getPlayer2().setChoice(choice);
            }
            this.checkForAllChoicesMade();
        }
    }
    /**
     * Checks to see if both players have made a choice. If so, a [[RoundOverEvent]] is generated by calling [[GameEngineImpl.processRound]]
     * and is sent to both players. This method waits [[_ROUND_DELAY]] milliseconds until it then either calls
     * [[endGame]] if either player has reached [[_FIRST_TO]] points, otherwise it will begin a new round
     * by calling [[beginRound]].
     */
    checkForAllChoicesMade() {
        // If both players have made their choice, process the results
        if (this._game.getPlayer1().getChoice() && this._game.getPlayer2().getChoice()) {
            // Informs players of the result of the round in the format
            // <RoundState> <Player 1 Event> <Player 2 Event>
            // i.e. draw shoot block
            let event = {
                event: 'round over',
                results: this._game.processRound(),
                player1: this._game.getPlayer1().toJSON(),
                player2: this._game.getPlayer2().toJSON()
            };
            this.sendToPlayers(JSON.stringify(event));
            // Wait five seconds until the next round starts
            // (allows players time to read what happened in the round)
            setTimeout(() => {
                // If a player has reached the point limit, the game is over and thus the lobby
                // should be destroyed
                if (this._game.getPlayer1().getPoints() === this._FIRST_TO) {
                    this.endGame('player 1');
                }
                else if (this._game.getPlayer2().getPoints() === this._FIRST_TO) {
                    this.endGame('player 2');
                }
                else {
                    this.beginRound();
                }
            }, this._ROUND_DELAY);
        }
    }
    /**
     * Sends details of the game's state (i.e. player details such as number of bullets,
     * points, etc.) to each player connected to the lobby
     */
    beginRound() {
        let event = {
            event: 'new round',
        };
        this.sendToPlayers(JSON.stringify(event));
    }
    /**
     * Sends each player a message declaring who won, before calling [[Server.destroyLobby]] to remove the lobby
     * @param victor The winner of this lobby (either player 1 or player 2)
     */
    endGame(victor) {
        let event = {
            event: 'game ended',
            winner: victor
        };
        this.sendToPlayers(JSON.stringify(event));
        this._server.destroyLobby(this._id);
    }
    /**
     * A utility method to send a message to both players connected to the lobby
     * @param message The message to be sent
     */
    sendToPlayers(message) {
        this._players[0].send(message);
        this._players[1].send(message);
    }
    getID() {
        return this._id;
    }
    getPlayers() {
        return this._players.slice();
    }
    getGameEngine() {
        return this._game;
    }
}
exports.default = Lobby;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9iYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmVyL21vZGVscy9Mb2JieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLDZEQUFxQztBQUNyQyx1RUFBK0M7QUFTL0M7Ozs7OztHQU1HO0FBQ0g7SUFzQkksWUFBWSxFQUFVLEVBQUUsTUFBYyxFQUFFLFVBQWtCLENBQUMsRUFBRSxhQUFxQixJQUFJO1FBQ2xGLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHdCQUFjLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxhQUFhLENBQUMsVUFBcUI7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxLQUFLLEdBQWtCO2dCQUN2QixLQUFLLEVBQUUsV0FBVztnQkFDbEIsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHO2FBQ3BCLENBQUM7WUFFRixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUMxQzthQUFNO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFFM0MsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3BCO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFNBQVM7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